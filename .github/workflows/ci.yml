name: Kotlin MCP Server CI

on:
  push:
    branches: [ "main", "develop", "AI-Enhancements" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Run Core Tests
      run: |
        python -m pytest tests/test_server_core.py -v --cov=kotlin_mcp_server

    - name: Run AI Integration Tests
      run: |
        python -m pytest tests/ai/ -v --cov-append --cov=ai

    - name: Run Code Generation Tests
      run: |
        python -m pytest tests/generators/ -v --cov-append --cov=generators

    - name: Run Tools Tests
      run: |
        python -m pytest tests/tools/ -v --cov-append --cov=tools

    - name: Run Utils Tests
      run: |
        python -m pytest tests/utils/ -v --cov-append --cov=utils

    - name: Run API Integration Tests
      run: |
        python -m pytest tests/test_api_tools.py tests/test_ui_layout_tools.py -v --cov-append

    - name: Generate Coverage Report
      run: |
        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        fail_ci_if_error: false

  build-validation:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate Server Import
      run: |
        python -c "from kotlin_mcp_server import KotlinMCPServer; print('✅ Server import successful')"

    - name: Test Tool Registration
      run: |
        python -c "
        import asyncio
        from kotlin_mcp_server import KotlinMCPServer
        
        async def test_tools():
            server = KotlinMCPServer('build-test')
            tools = await server.handle_list_tools()
            tool_count = len(tools.get('tools', []))
            print(f'✅ Registered {tool_count} tools')
            assert tool_count >= 31, f'Expected at least 31 tools, got {tool_count}'
            
        asyncio.run(test_tools())
        "

    - name: Test Basic Tool Functionality
      run: |
        python -c "
        import asyncio
        import tempfile
        from kotlin_mcp_server import KotlinMCPServer
        
        async def test_basic_tool():
            server = KotlinMCPServer('build-test')
            server.set_project_path(tempfile.mkdtemp())
            
            # Test a basic tool
            result = await server.handle_call_tool('create_kotlin_class', {
                'class_name': 'TestClass',
                'package_name': 'com.test'
            })
            
            assert 'content' in result, 'Tool should return content'
            print('✅ Basic tool functionality working')
            
        asyncio.run(test_basic_tool())
        "
