name: MCP Server Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov flake8 black isort pylint mypy bandit psutil

    - name: Run code formatting checks
      run: |
        # Check if code is formatted correctly
        python -m black --check --diff . --exclude htmlcov --exclude __pycache__ --exclude .git || (echo "❌ Code formatting failed. Run 'black .' to fix." && exit 1)
        
        # Check import sorting
        python -m isort --check-only --diff . --skip htmlcov --skip __pycache__ || (echo "❌ Import sorting failed. Run 'isort .' to fix." && exit 1)

    - name: Run linting checks
      run: |
        # Flake8 style check
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=htmlcov,__pycache__,.git
        python -m flake8 . --count --exit-zero --max-complexity=12 --max-line-length=100 --statistics --exclude=htmlcov,__pycache__,.git

    - name: Run type checking
      run: |
        # MyPy type checking (allow failures for now)
        python -m mypy . --ignore-missing-imports --exclude="htmlcov|__pycache__|\.git" || echo "⚠️  Type checking had issues (non-blocking)"

    - name: Run security checks
      run: |
        # Bandit security check
        python -m bandit -r . -f txt --exclude="htmlcov,__pycache__,.git" || echo "⚠️  Security issues found (non-blocking)"

    - name: Run unit tests
      run: |
        # Run modular test suite with coverage
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing --tb=short
        
        # Run legacy tests for validation config (if still needed)
        if [ -f "test_validate_config.py" ]; then
          python -m pytest test_validate_config.py -v --cov-append --cov=. --cov-report=xml --cov-report=term-missing --tb=short
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run functionality validation
      run: |
        # Test main server import and basic functionality
        python -c "from kotlin_mcp_server import KotlinMCPServer; print('✅ Main server import successful')"
        python -c "
        import asyncio
        from kotlin_mcp_server import KotlinMCPServer
        
        async def test_basic_functionality():
            server = KotlinMCPServer('ci-test')
            tools = await server.handle_list_tools()
            tool_count = len(tools.get('tools', []))
            print(f'✅ Server initialized with {tool_count} tools')
            
        asyncio.run(test_basic_functionality())
        "

    - name: Run performance tests
      run: |
        # Basic performance validation
        python -c "
        import asyncio
        import time
        import tempfile
        from pathlib import Path
        from kotlin_mcp_server import KotlinMCPServer
        
        async def perf_test():
            server = KotlinMCPServer('ci-test')
            server.set_project_path(tempfile.mkdtemp())
            
            start = time.time()
            result = await server.handle_list_tools()
            duration = time.time() - start
            
            print(f'✅ Tool listing completed in {duration:.3f}s')
            print(f'✅ Server has {len(result.get(\"tools\", []))} tools available')
            assert duration < 5.0, 'Tool listing too slow'
            
            import shutil
            shutil.rmtree(server.project_path, ignore_errors=True)
        
        asyncio.run(perf_test())
        "

  integration-tests:
    needs: quality-checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio psutil

    - name: Run integration tests
      run: |
        # Run comprehensive CI pipeline
        python ci_test_runner.py

  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security audit
      run: |
        # Check for known vulnerabilities
        safety check --json > safety-report.json || echo "⚠️  Vulnerability check completed"
        
        # Run comprehensive security scan
        bandit -r . -f json -o bandit-report.json --exclude="htmlcov,__pycache__,.git" || echo "⚠️  Security scan completed"

    - name: Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
        retention-days: 30
