name: Essential CI
permissions:
  contents: read

on:
  push:
    branches: [ "main", "develop", "feature/critical-mcp-compliance" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov flake8 black isort

    - name: Code Quality Checks
      run: |
        # Format checking
        python -m black --check --diff . --exclude "htmlcov|__pycache__|\.git|archive" || (echo "‚ùå Code formatting failed. Run 'black .' to fix." && exit 1)
        
        # Import sorting
        python -m isort --check-only --diff . --skip htmlcov --skip __pycache__ --skip archive || (echo "‚ùå Import sorting failed. Run 'isort .' to fix." && exit 1)
        
        # Linting
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=htmlcov,__pycache__,.git,archive
        
        echo "‚úÖ Code quality checks passed"

    - name: Run Tests with Coverage
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-python-${{ matrix.python-version }}
        fail_ci_if_error: false

  integration:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Server Validation
      run: |
        python -c "
        import asyncio
        import tempfile
        from kotlin_mcp_server import KotlinMCPServer
        
        async def validate():
            print('üîç Validating server...')
            server = KotlinMCPServer('integration-test')
            server.set_project_path(tempfile.mkdtemp())
            
            # Check tool registration
            tools = await server.handle_list_tools()
            tool_count = len(tools.get('tools', []))
            print(f'‚úÖ Server registered {tool_count} tools')
            
            # Test core functionality
            result = await server.handle_call_tool('create_kotlin_file', {
                'file_path': 'test/TestClass.kt',
                'package_name': 'com.test',
                'class_name': 'TestClass',
                'class_type': 'class'
            })
            assert 'content' in result
            print('‚úÖ Core functionality verified')
            
        asyncio.run(validate())
        "

    - name: Run CI Test Runner
      run: |
        python ci_test_runner.py
